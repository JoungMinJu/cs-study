### 객체지향 설계의 핵심

- 역할 : 어플리케이션의 기능을 구현하기 위해 메시지를 주고받는 객체들 사이의 상호작용
- 책임 : 객체가 다른 객체와 협력하기 위해 수행하는 행동
- 협력 : 대체 가능한 책임의 집합

책임 주도 설계 —> 책임이 객체지향 애플리케이션 전체의 품질을 결정하는 것.

객체지향 설계 = 올바른 객체에게 올바른 책임을 할당하면서 낮은 결합도와 높은 응집도를 가진 구조를 창조하는 활동.

1. 객체지향 설계의 **핵심 = 책임**
2. **책임을 할당하는 작업**이 응집도와 결합도 같은 설계 품질과 깊이 연관돼 있다는 것.

설계 —> 변경을 위해 존재

훌륭한 설계?

→ 합리적인 비용 안에서 변경을 수용할 수 있는 구조를 만드는 것.

책임 = 객체의 상태에서 행동으로, 나아가 객체와 객체 사이의 상호작용으로 설계 중심을 이동. 결합도가 낮고, 응집도가 높은 구현을 효과적으로 캡슐화하는 객체들을 창조할 수 있는 기반을 제공.

데이터 중심 VS 책임 중심 

| 데이터 중심 관점 | 책임 중심 관점 |
| --- | --- |
| 자신이 포함하고 있는 데이터를 조작하는 데 필요한 오퍼레이션을 정의한다. | 다른 객체가 요청할 수 있는 오퍼레이션을 위해 필요한 상태를 보관한다. |
| 객체의 상태에 초점을 맞춘다. | 객체의 행동에 초점을 맞춘다. |
| 객체를 독립된 데이터 덩어리로 바라본다. | 객체를 협력하는 공동체의 일원으로 바라본다. |

→ 당연하게도 훌륭한 객체 지향 설계는 데이터가 아니라, 책임에 초점을 맞춰야 한다. 이유는 변경.

객체의 상태 = 구현 

→ 구현은 불안정하고 변하기 쉽다.

→ 상태를 객체 분할의 중심축으로 삼으면 구현에 관한 세부사항이 객체의 인터페이스에 스며들게 되어 캡슐화의 원칙이 무너짐 

→ 상태 변화 시 인터페이스의 변경 초래 해당 인터페이스에 의존하는 모든 객체의 변경 영향이 퍼지게 됨. 

→ 변화에 취약.

책임을 수행하는 데 필요한 상태를 캡슐화함으로써 구현 변경에 대한 파장이 외부로 퍼져나가는 것을 방지. 책임에 초점을 맞추면 상대적으로 변경에 안정적인 설계를 얻을 수 있음.

### 데이터를 준비하자.

- 데이터 중심의 설계 = 객체 내부에 저장되는 데이터를 기반으로 시스템을 분할하는 방법.

## 데이터 중심 설계 VS 책임 중심 설계

- 캡슐화
    - 상태와 행동을 하나의 객체 안에 모으는 이유는 객체의 내부 구현을 외부로부터 감추기 위해.
    - 구현 = 나중에 변경될 가능성이 높은 어떤 것. —> 이런 맥락에서 객체지향이 강력한 이유 = 한 곳에서 일어난 변경이 전체 시스템에 영향을 끼치지 않도록 파급효과를 적절하게 조절할 수 있는 장치를 제공하기 때문.
    - 인터페이스 = 구현보다 상대적으로 안정적인 부분.
    - 객체 외부에서는 인터페이스에만 의존하도록 관계를 조절하는 것.
    - 설계가 필요한 이유 = 요구사항이 변경되기 때문.
        - 이러한 맥락에서 캡슐화가 중요한 이유 = 불안정한 부분과 안정적인 부분을 분리해서 변경의 영향을 통제할 수 있기 때문.
    - 캡슐화 = 변경 가능성이 높은 부분을 객체 내부로 숨기는 추상화 기법.
        - 객체 내부에 무엇을 캡슐화? → 변경될 수 있는 어떤 것이라도 캡슐화 필요.
        

### 응집도와 결합도

- 응집도 : 모듈에 포함된 내부 요소들이 연관돼 있는 정도
- 결합도 : 의존성의 정도

중요한 것은 두가지 모두 설계와 관련이 있다는 것.

→ 좋은 설계 = ***높은 응집도와 낮은 결합도.*** → 변경하기 쉽게 만듦.

‘변경’의 관점에서 응집도 : 변경이 발생할 때 모듈 내부에서 발생하는 변경의 정도

ex ) 하나의 변경을 수용하기 위해 모듈 전체가 함께 변경된다면 응집도가 높은 것. 반대도 똑같이

응집도가 높으면 변경의 대상과 범위가 명확해짐

‘변경’의 관점에서 결합도 : 한 모듈이 변경되기 위해서 다른 모듈의 변경을 요구하는 정도

중요한 것은 캡슐화의 정도가 응집도와 결합도에 영향을 미친다는 사실을 강조해야 한다. 

→ 캡슐화를 지키면 모듈 안의 응집도는 높아지고 모듈 사이의 결합도는 낮아진다. 

데이터 중심의 설계의 문제점 

1. 캡슐화 위반
2. 높은 결합도
3. 낮은 응집도

### 캡슐화를 지켜라

- 설계의 제 1원칙
- 속성의 가시성을 private으로 설정했다고 해도 접근자와 수정자를 통해 속성을 외부로 제공하고 있따면 캡슐화를 위반하는 것.

→ 계속해서 반복해서 얘기하지만, 단순한 구현이 아니라, 객체가 책임을 지게 하는 것. 그것을 강조. 그렇기에 getter나 setter를 사용하는 것은 어떤 객체에 대해서 속성값을 가져와서 다른 메서드에 사용하게 된다면 코드 중복 및 변경에 취약할 수 밖에 없기 때문에 ***최대한 객체에게 책임을 부여한다는 의미로서 설계를 진행해야 된다.***

***코드 중복은 악의 근원***

### 스스로 자신의 데이터를 책임지는 객체

- 객체는 단순한 데이터 제공자가 아니다. → 객체가 협력에 참여하면서 수행할 책임을 정의하는 호퍼레이션이 더 중요.
- 객체를 생성할 때 질문 두 가지
    - 이 객체가 어떤 데이터를 포함해야 하는가?
    - 이 객체가 데이터에 대해 수행해야 하는 오퍼레이션은 무엇인가?

### 캡슐화의 진정한 의미

- 단순히 객체 내부의 데이터를 외부로부터 감추는 것 이상의 의미를 가짐
- ***변경될 수 있는 어떤 것이라도 감추는 것을 의미***
- 내부 속성을 외부로부터 감추는 것은 ‘데이터 캡슐화’라고 불리는 캡슐화의 한 종류일 뿐
- 내부 구현의 변경이 외부의 객체에 영향을 준다? → 캡슐화 위반

### 데이터 중심 설계의 문제점 2가지

1. 객체의 행동보다는 상태에 초점을 맞춘다.
    1. 데이터 중심 설계는 너무 이른 시기에 데이터에 대해 고민하기에, 캡슐화에 실패하게 된다.
2. 객체를 고립시킨 채 오퍼레이션을 정의하도록 만든다.
    1. 객체 지향 애플리케이션을 구현하는 것은 협력하는 객체들의 공동체를 구축한다는 것을 의미. → 협력이라는 문맥 안에서 필요한 책임 결정 후 객체를 결정하는 것이 가장 중요
    2. 그러나, 데이터 중심 설계는 초점이 객체의 외부가 아닌 내부로 향함. 
        1. 객체의 구현이 이미 결정된 상태에서 다른 객체와의 협력 방법을 고민하기 ㄸ매누에 이미 구현된 객체의 인터페이스를 억지로 끼워맞출 수 밖에 없다. → 변경에 취약
